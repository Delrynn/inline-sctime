
/ToggleSCTime {

  ;Defaults to 'enabled' if no toggle variable is set.
  ;Using /toggleSCTime for the first time will thus disable the script
  ;AdiIRC should remember the setting at next launch

  if ( $var(%SCTimeEnabled) == 1 ) {
    if (%SCTimeEnabled == $false) {
      set -g %SCTimeEnabled $true
      echo -ag Inline SCTime� Enabled
    }
    else {
      set -g %SCTimeEnabled $false
      echo -ag Inline SCTime� Disabled
    }
  }
  else  {
    set -g %SCTimeEnabled $false
    echo -ag Inline SCTime� Disabled
  }
}

/ToggleSCTimeDebug {

  ;Defaults to 'disabled' if no toggle variable is set.
  ;Using /toggleSCTimeDebug for the first time will thus enable debugging
  ;AdiIRC should remember this setting at next launch

  if ( $var(%SCTimeDebug) == 1 ) {
    if (%SCTimeDebug == $false) {
      set %SCTimeDebug $true
      echo -ag Inline SCTime� Debug Enabled
    }
    else {
      set  %SCTimeDebug $false
      echo -ag Inline SCTime� Debug Disabled
    }
  }
  else  {
    set %SCTimeDebug $true
    echo -ag Inline SCTime� Debug  Enabled
  }
}

/ConvertToLs {

  ;convert distance into light seconds
  var %distance $round( $regml(lightDistance,1), 2 )
  var %lastMatch $regml(lightDistance,0)

  if ( $regml(lightDistance,%lastMatch) == mls ) {
    var %toReturn $calc(%distance * 1000000)
  }
  elseif ( $regml(lightDistance,%lastMatch) == kls ) {
    var %toReturn $calc(%distance * 1000)
  }
  elseif ( $regml(lightDistance,%lastMatch) == ly ) {
    if ( %distance > 0.5 ) {
      var %toReturn -1
    }
    else {
      var %toReturn $calc(%distance * 31557600)
    }
  }
  elseif ( $regml(lightDistance,%lastMatch) == ls ) {
    return %distance
  }
  else {
    ;unrecognized units, shouldn't have matched regex so this should be impossible
    var %toReturn -2
  }

  return %toReturn
}

/CalcTotalSeconds {

  var %lightSeconds $1

  if (%lightSeconds < 100000) {    
    var %toReturn $int($calc( ( %lightSeconds ^ 0.3292 ) * 8.9034 ))
  }
  elseif (%lightSeconds < 1907087) {
    var %val1 $calc( -8 * 10 ^ -23 * %lightSeconds ^ 4 )
    var %val2 $calc( 4 * 10 ^ -16 * %lightSeconds ^ 3 - 8 * 10 ^ -10 * %lightSeconds ^ 2 )
    var %val3 $calc( 0.0014 * %lightSeconds + 264.79 )
    var %toReturn $int($calc( %val1 + %val2 + %val3 ))
  }
  else {
    var %toReturn $int($calc( ( %lightSeconds - 5265389.609 ) / 2001 + 3412 ))
  }
  return %toReturn

}

/FormatTimeString {

  ;convert to human readable
  var %totalSeconds $1
  var %hours $calc( %totalSeconds // 3600 )
  var %remainderSec $calc( %totalSeconds % 3600 )
  var %minutes $calc( %remainderSec // 60 )
  var %seconds $calc( %totalSeconds % 60 )

  ;format and add time estimate to distance
  if ( %hours > 0 ) {
    var %formattedTime ( $+ %hours $+ h $+ %minutes $+ m $+ %seconds $+ s)
  }
  elseif ( %minutes > 0 ) {
    var %formattedTime ( $+ %minutes $+ m $+ %seconds $+ s)
  }
  else {
    var %formattedTime ( $+ %seconds $+ s)
  }
  var %formattedTime $chr(29) $+ $chr(3) $+ $color(whois) %formattedTime $+ $chr(15)
  var %lastMatch $regml(lightDistance,0)
  return $regml(lightDistance,1) $+ $regml(lightDistance,%lastMatch) $+ %formattedTime 

}

}
