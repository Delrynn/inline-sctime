alias ToggleSCTime {

  ;Defaults to 'enabled' if no toggle variable is set.
  ;Using /toggleSCTime for the first time will thus disable the script
  ;AdiIRC should remember the setting at next launch
  
  if ( $var(%SCTimeEnabled) == 1 ) {
    if (%SCTimeEnabled == $false) {
      set -g %SCTimeEnabled $true
      echo -ag Inline SCTime™ Enabled
    }
    else {
      set -g %SCTimeEnabled $false
      echo -ag Inline SCTime™ Disabled
    }
  }
  else  {
    set -g %SCTimeEnabled $false
    echo -ag Inline SCTime™ Disabled
  }
}

alias ToggleSCTimeDebug {

  ;Defaults to 'disabled' if no toggle variable is set.
  ;Using /toggleSCTimeDebug for the first time will thus enable debugging
  ;AdiIRC should remember this setting at next launch
  
  if ( $var(%SCTimeDebug) == 1 ) {
    if (%SCTimeDebug == $false) {
      set %SCTimeDebug $true
      echo -ag Inline SCTime™ Debug Enabled
    }
    else {
      set  %SCTimeDebug $false
      echo -ag Inline SCTime™ Debug Disabled
    }
  }
  else  {
    set %SCTimeDebug $true
    echo -ag Inline SCTime™ Debug  Enabled
  }
}

alias ConvertToLs {    

    ;convert distance into light seconds
    var %distance $round( $replacecs($regml(lightDistance,1),$chr(44),), 2 )
    var %lastMatch $regml(lightDistance,0)

    if ( $regml(lightDistance,%lastMatch) == mls ) {
      var %toReturn $calc(%distance * 1000000)
    }
    elseif ( $regml(lightDistance,%lastMatch) == kls ) {
      var %toReturn $calc(%distance * 1000)
    }
    elseif ( $regml(lightDistance,%lastMatch) == ly ) {
      if ( %distance > 0.5 ) {
        var %toReturn -1
      }
      else {
        var %toReturn $calc(%distance * 31557600)
      }
    }
    elseif ( $regml(lightDistance,%lastMatch) == ls ) {
      return %distance
    }
    else {
      ;unrecognized units, shouldn't have matched regex so this should be impossible
      var %toReturn -2
    }
    
    return %toReturn
}

alias CalcTotalSeconds {

    var %lightSeconds $1
    
    var %destinationGravity $2
    
    if (%destinationGravity) {
      set %lightSeconds $int( $calc( %lightSeconds / 2 ) )
    }

    if (%lightSeconds < 100000) {    
      var %toReturn $int($calc( ( %lightSeconds ^ 0.3292 ) * 8.9034 ))
    }
    elseif (%lightSeconds < 1907087) {
      var %val1 $calc( -8 * 10 ^ -23 * %lightSeconds ^ 4 )
      var %val2 $calc( 4 * 10 ^ -16 * %lightSeconds ^ 3 - 8 * 10 ^ -10 * %lightSeconds ^ 2 )
      var %val3 $calc( 0.0014 * %lightSeconds + 264.79 )
      var %toReturn $int($calc( %val1 + %val2 + %val3 ))
    }
    else {
      var %toReturn $int($calc( ( %lightSeconds - 5265389.609 ) / 2001 + 3412 ))
    }
    if (%destinationGravity) {
      set %toReturn $int( $calc( %toReturn * 2 ) )
    }
    return %toReturn

}

alias CalcMandalaySeconds {

  var %lightSeconds $1
  
  if (%lightSeconds < 50000) {
    var %toReturn 25
  }
  else {
    var %toReturn $int($calc( ( 0.000237255 * %lightSeconds ) + 13.9247 ))
  }
  
  return %toReturn

}

alias FormatTimeString {

    ;convert to human readable
    var %totalSeconds $1
    var %hours $calc( %totalSeconds // 3600 )
    var %remainderSec $calc( %totalSeconds % 3600 )
    var %minutes $calc( %remainderSec // 60 )
    var %seconds $calc( %totalSeconds % 60 )
    
    ;format and add time estimate to distance
    if ( %hours > 0 ) {
      var %formattedTime %hours $+ h $+ %minutes $+ m
    }
    elseif ( %minutes > 0 ) {
      var %formattedTime %minutes $+ m $+ %seconds $+ s
    }
    else {
      var %formattedTime %seconds $+ s
    }

    return %formattedTime 
    
}


on ^*:TEXT:*:#:{

  if ( $var(%SCTimeEnabled) == 0 ) {
      set -g %SCTimeEnabled $true
  }

  var %distanceRegex /((\d+|,|\.)+)\s?(kls|mls|ls|ly)/iS
  ;Use this regex instead to only match on callouts
  ;var %distanceRegex /#.*\s((\d+|,|\.)+)\s?(kls|mls|ls|ly)/iS
  if ( $nick != MechaSqueak[BOT] && $regex(lightDistance, $1-, %distanceRegex) && %SCTimeEnabled == $true && $replacecs($regml(lightDistance,1),$chr(44),) isnum ) {
    
    ;calc distance to time
    ;convert distance to float, works with a decimal (ie 5.65kls)
    ;does not work with orders of magntiude separators (ie 1,000,000ls)
    var %lightSeconds $ConvertToLs()
    if (%lightSeconds < 0) {
      return
    }
        

    var %distanceAndTime $FormatTimeString(%totalSeconds)
    
     ;add gravwell calculation

      var %destinationGravity = $true
      var %totalGravSeconds $CalcTotalSeconds(%lightSeconds,$true)

    ;calculate total seconds
    var %totalSeconds $CalcTotalSeconds(%lightSeconds,$false)
    if (%totalSeconds < 0) {
      return
      if (%destinationGravity && %totalGravSeconds < 0) {
        return
      }
    }

    var %totalMandalaySeconds $CalcMandalaySeconds(%lightSeconds)
    if ( %totalMandalaySeconds == 25 ) {
      var %mandyDistanceAndTime = < 25s
    }
    else {
      var %mandyDistanceAndTime $FormatTimeString(%totalMandalaySeconds)
    }

    ;Format human readable time string. add grav time if detected.
    var %distanceAndTime $FormatTimeString(%totalSeconds)
    if (%destinationGravity) {
      var %gravDistanceAndTime $FormatTimeString(%totalGravSeconds)
      if ( %lightSeconds > 1600000 ) {
        set %distanceAndTime %distanceAndTime $+ $chr(124) $+ %gravDistanceAndTime $+ $chr(124) $+ $chr(29) $+ $chr(3) $+ 04 $+ %mandyDistanceAndTime $+ $chr(3) $+ $color(whois)
      }
      else {
        set %distanceAndTime %distanceAndTime $+ $chr(124) $+ %gravDistanceAndTime $+ $chr(124) $+ %mandyDistanceAndTime
      }
    }
       
    set %distanceAndTime $regml(lightDistance,1).full $+ $chr(29) $+ $chr(3) $+ $color(whois) ( $+ %distanceAndTime $+ ) $+ $chr(15)
        
    ;get nick mode char, rgbmode, and color number
    var %cmode $nick(#,$nick).cmode
    var %colorChar 
    var %color
    
    var %nickColorNum = $cnick(0)
    var %i = 1
    var %found = $false
    
    ;check if chatter has special nick color
    while ( %i <= %nickColorNum && !%found ) {
      if ( $cnick(%i) iswm $fulladdress ) {
        set %found $true
          if ( $cnick(%i).rgbcolor ) {
            set %color $rgb($cnick(%i).rgbcolor).hex
            set %colorChar $chr(4)
          }
          else {
            set %color $cnick(%i).color
            set %colorChar $chr(3)
          }
      }
      inc %i
    }
    
    ;if no special nick color is set, find the default
    if (!%found && $randomcolors) {
      if ( $nick(#,$nick).rgbcolor ) {
        set %color $rgb($nick(#,$nick).rgbcolor).hex
        set %colorChar $chr(4)
      }
      else {
        set %color $nick(#,$nick).color
        set %colorChar $chr(3)    
      }

    }
    
    
    
    ;insert time into message
    noop $regsub($1-,%distanceRegex,%distanceAndTime,%subbedText)

    
    ;print the final result
    echo -vrlmbf $timestamp $prefixuser(#, %colorChar $+ %color $+ %cmode $+ $nick $+ %colorChar)  %subbedText

    halt
    
  }

}

on *:INPUT:#:{

  if ( $var(%SCTimeEnabled) == 0 ) {
      set -g %SCTimeEnabled $true
  }

  var %distanceRegex /((\d+|,|\.)+)\s?(kls|mls|ls|ly)/iS
  ;Use this regex instead to only match on callouts
  ;var %distanceRegex /#.*\s((\d+|,|\.)+)\s?(kls|mls|ls|ly)/iS
  if ( $nick != MechaSqueak[BOT] && $regex(lightDistance, $1-, %distanceRegex) && %SCTimeEnabled == $true && $replacecs($regml(lightDistance,1),$chr(44),) isnum ) {
    
    ;calc distance to time
    ;convert distance to float, works with a decimal (ie 5.65kls)
    ;does not work with orders of magntiude separators (ie 1,000,000ls)
    var %lightSeconds $ConvertToLs()
    if (%lightSeconds <= 0) {
      return
    }
        
    ;add gravwell calculation
    var %destinationGravity = $true
    var %totalGravSeconds $CalcTotalSeconds(%lightSeconds,$true)
        
    ;calculate total seconds
    var %totalSeconds $CalcTotalSeconds(%lightSeconds,$false)
    if (%totalSeconds <= 0) {
      return
       if (%destinationGravity && %totalGravSeconds <= 0) {
        return
      }
    }
    
    var %totalMandalaySeconds $CalcMandalaySeconds(%lightSeconds)
    if ( %totalMandalaySeconds == 25 ) {
      var %mandyDistanceAndTime = <25s
    }
    else {
      var %mandyDistanceAndTime $FormatTimeString(%totalMandalaySeconds)
    }

    ;Format human readable time string. add grav time if detected.
    var %distanceAndTime $FormatTimeString(%totalSeconds)
    if (%destinationGravity) {
      var %gravDistanceAndTime $FormatTimeString(%totalGravSeconds)
      if ( %lightSeconds > 1600000 ) {
        set %distanceAndTime %distanceAndTime $+ $chr(124) $+ %gravDistanceAndTime $+ $chr(124) $+ $chr(29) $+ $chr(3) $+ 04 $+ %mandyDistanceAndTime $+ $chr(15)
      }
      else {
        set %distanceAndTime %distanceAndTime $+ $chr(124) $+ %gravDistanceAndTime $+ $chr(124) $+ %mandyDistanceAndTime
      }
    }
       

    set %distanceAndTime $chr(29) $+ $chr(3) $+ $color(whois) %distanceAndTime $+ $chr(15)

    
    ;print the final result
    ;If user typed "/sctime xxx", then supress the /say
    if ( /sctime !isin $1- ) {
    say $1-
    }
    echo -ag ( $+ $regml(lightDistance,1).full $+ %distanceAndTime $+ )

    halt
    
  }

}
